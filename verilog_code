`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 09.09.2023 15:18:30
// Design Name: 
// Module Name: digital_clock
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////



    module digital_clock(clk,rst,anode,cathode);
    input clk,rst;
    output reg [7:0] anode,cathode;
    reg [34:0]counter1hz=0;
    reg [31:0]counter1khz=0;
    reg clk1khz=0;
    reg clk1hz=0;
    reg [5:0]s=0,m=0;
    reg [4:0]h=0;
    reg [3:0]b0,b1,b2,b3,b4,b5;
    reg [2:0] ref=0;
    reg [3:0]digit;
    
    
    always@(posedge clk)                   //clock generation of 1hz//
    begin
    
    if(counter1hz==450000) 
    begin
    clk1hz<=~clk1hz;
    counter1hz<=0;
    
    end
    else counter1hz<=counter1hz+1;
    end
    
    always@(posedge clk)                   //clock generation of 1khz//
    begin
    
    if(counter1khz==49999) 
    begin
    clk1khz<=~clk1khz;
    counter1khz<=0;
    
    end
    else counter1khz<=counter1khz+1;
    end
    
    always@(posedge clk1hz)               //digital clock generation code
    begin
    if(rst || s==60) s<=0;
    else s<=s+1;
    end
    always@(posedge clk1hz)
    begin
    if(rst || m==60) m<=0;
    else if(s==60) m<=m+1;
    end
    always@(posedge clk1hz)
    begin
    if(rst || h==24) h<=0;
    else if(m==60) h<=h+1;
    end
    
    
    always@(s or m or h)                   //bcd converter//
    begin
    b0<=s%10;
    b1<=s/10;
    b2<=m%10;
    b3<=m/10;
    b4<=h%10;
    b5<=h/10;
    end
    
    
    
    
    always@(posedge clk1khz)
    begin
    if(ref==5) ref<=0;
    else ref<=ref+1;
    end
    
    always@(b0 or b1 or b2 or b3 or b4 or b5 or ref)             //intermediate display
    begin
    case(ref)
    0:digit<=b0;
    1:digit<=b1;
    2:digit<=b2;
    3:digit<=b3;
    4:digit<=b4;
    5:digit<=b5;
    default: digit<=0;
    endcase
    end
    
    
    
    always@(digit)                                          //cathode block
    begin
    case(digit)
    0:cathode<=8'b00000011;
    1:cathode<=8'b10011111;
    2:cathode<=8'b00100101;
    3:cathode<=8'b00001101;
    4:cathode<=8'b10011001;
    5:cathode<=8'b01001001;
    6:cathode<=8'b01000001;
    7:cathode<=8'b00011111;
    8:cathode<=8'b00000001;
    9:cathode<=8'b00001001;
    default: cathode<=8'b11111111;
    
    endcase
    end
    
    
    always@(ref)             //anode block
    begin
    case(ref)
    0:anode<=8'b11111110;
    1:anode<=8'b11111101;
    2:anode<=8'b11111011;
    3:anode<=8'b11110111;
    4:anode<=8'b11101111;
    5:anode<=8'b11011111;
    
    default: anode<=8'b11111111;
    endcase
    end

    endmodule
